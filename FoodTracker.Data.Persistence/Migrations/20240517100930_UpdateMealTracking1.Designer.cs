// <auto-generated />
using System;
using FoodTracker.Data.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodTracker.Data.Persistence.Migrations
{
    [DbContext(typeof(VoedingDbContext))]
    [Migration("20240517100930_UpdateMealTracking1")]
    partial class UpdateMealTracking1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MeasurementUnitEntityProductEntity", b =>
                {
                    b.Property<string>("ProductEntityProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UnitsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductEntityProductId", "UnitsId");

                    b.HasIndex("UnitsId");

                    b.ToTable("MeasurementUnitEntityProductEntity");
                });

            modelBuilder.Entity("FoodTracker.Data.Persistence.Entities.Product.BaseProductEntity", b =>
                {
                    b.Property<string>("BaseProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BaseProductId");

                    b.ToTable("BaseProducts");
                });

            modelBuilder.Entity("FoodTracker.Data.Persistence.Entities.Product.MeasurementUnitEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("GramsPerUnit")
                        .HasColumnType("float");

                    b.Property<bool>("IsTussendoortje")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeasurementUnits");
                });

            modelBuilder.Entity("FoodTracker.Data.Persistence.Entities.Product.ProductEntity", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseProductEntityBaseProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ean")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductInfoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("BaseProductEntityBaseProductId");

                    b.HasIndex("ProductInfoId")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FoodTracker.Data.Persistence.Entities.Product.ProductInfoEntity", b =>
                {
                    b.Property<string>("ProductInfoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Alcohol")
                        .HasColumnType("float");

                    b.Property<double?>("Calcium")
                        .HasColumnType("float");

                    b.Property<string>("Ean")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Eiwit")
                        .HasColumnType("float");

                    b.Property<double?>("EiwitPlantaardig")
                        .HasColumnType("float");

                    b.Property<double?>("Energie")
                        .HasColumnType("float");

                    b.Property<double?>("Foliumzuur")
                        .HasColumnType("float");

                    b.Property<double?>("Fosfor")
                        .HasColumnType("float");

                    b.Property<double?>("IJzer")
                        .HasColumnType("float");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("bit");

                    b.Property<double?>("Jodium")
                        .HasColumnType("float");

                    b.Property<double?>("Kalium")
                        .HasColumnType("float");

                    b.Property<double?>("Koolhydraten")
                        .HasColumnType("float");

                    b.Property<double?>("Magnesium")
                        .HasColumnType("float");

                    b.Property<double?>("Natrium")
                        .HasColumnType("float");

                    b.Property<double?>("Nicotinezuur")
                        .HasColumnType("float");

                    b.Property<bool>("NutritionalValuesBasedOnPreparedProduct")
                        .HasColumnType("bit");

                    b.Property<string>("ProductGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Selenium")
                        .HasColumnType("float");

                    b.Property<double?>("Suikers")
                        .HasColumnType("float");

                    b.Property<double?>("VerzadigdVet")
                        .HasColumnType("float");

                    b.Property<double?>("Vet")
                        .HasColumnType("float");

                    b.Property<double?>("Vezels")
                        .HasColumnType("float");

                    b.Property<double?>("VitamineA")
                        .HasColumnType("float");

                    b.Property<double?>("VitamineB1")
                        .HasColumnType("float");

                    b.Property<double?>("VitamineB12")
                        .HasColumnType("float");

                    b.Property<double?>("VitamineB2")
                        .HasColumnType("float");

                    b.Property<double?>("VitamineB6")
                        .HasColumnType("float");

                    b.Property<double?>("VitamineC")
                        .HasColumnType("float");

                    b.Property<double?>("VitamineD")
                        .HasColumnType("float");

                    b.Property<double?>("VitamineE")
                        .HasColumnType("float");

                    b.Property<double?>("Water")
                        .HasColumnType("float");

                    b.Property<double?>("WeightGainFactor")
                        .HasColumnType("float");

                    b.Property<double?>("Zink")
                        .HasColumnType("float");

                    b.Property<double?>("Zout")
                        .HasColumnType("float");

                    b.HasKey("ProductInfoId");

                    b.ToTable("ProductInfo");
                });

            modelBuilder.Entity("FoodTracker.Data.Persistence.Entities.ProductTracking.TrackedMealEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeasurementUnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("ProductId");

                    b.ToTable("TrackedMeals");
                });

            modelBuilder.Entity("MeasurementUnitEntityProductEntity", b =>
                {
                    b.HasOne("FoodTracker.Data.Persistence.Entities.Product.ProductEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductEntityProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTracker.Data.Persistence.Entities.Product.MeasurementUnitEntity", null)
                        .WithMany()
                        .HasForeignKey("UnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodTracker.Data.Persistence.Entities.Product.ProductEntity", b =>
                {
                    b.HasOne("FoodTracker.Data.Persistence.Entities.Product.BaseProductEntity", null)
                        .WithMany("Products")
                        .HasForeignKey("BaseProductEntityBaseProductId");

                    b.HasOne("FoodTracker.Data.Persistence.Entities.Product.ProductInfoEntity", "ProductInfo")
                        .WithOne()
                        .HasForeignKey("FoodTracker.Data.Persistence.Entities.Product.ProductEntity", "ProductInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInfo");
                });

            modelBuilder.Entity("FoodTracker.Data.Persistence.Entities.ProductTracking.TrackedMealEntity", b =>
                {
                    b.HasOne("FoodTracker.Data.Persistence.Entities.Product.MeasurementUnitEntity", "Unit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId");

                    b.HasOne("FoodTracker.Data.Persistence.Entities.Product.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("FoodTracker.Data.Persistence.Entities.Product.BaseProductEntity", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
